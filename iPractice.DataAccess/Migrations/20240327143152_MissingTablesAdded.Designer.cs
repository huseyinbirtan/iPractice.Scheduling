// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iPractice.DataAccess;

namespace iPractice.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240327143152_MissingTablesAdded")]
    partial class MissingTablesAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("ClientPsychologist", b =>
                {
                    b.Property<long>("ClientsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PsychologistsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClientsId", "PsychologistsId");

                    b.HasIndex("PsychologistsId");

                    b.ToTable("ClientPsychologist");
                });

            modelBuilder.Entity("iPractice.Scheduling.Domain.ScheduleAggregate.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AvailabilityId")
                        .HasColumnType("TEXT");

                    b.Property<long>("ClientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("ClientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("iPractice.Scheduling.Domain.ScheduleAggregate.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("iPractice.Scheduling.Domain.ScheduleAggregate.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long>("PsychologistId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PsychologistId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("iPractice.Scheduling.Domain.SyncAggregates.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("iPractice.Scheduling.Domain.SyncAggregates.Psychologist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Psychologists");
                });

            modelBuilder.Entity("ClientPsychologist", b =>
                {
                    b.HasOne("iPractice.Scheduling.Domain.SyncAggregates.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iPractice.Scheduling.Domain.SyncAggregates.Psychologist", null)
                        .WithMany()
                        .HasForeignKey("PsychologistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iPractice.Scheduling.Domain.ScheduleAggregate.Appointment", b =>
                {
                    b.HasOne("iPractice.Scheduling.Domain.ScheduleAggregate.Availability", "Availability")
                        .WithMany("Appointments")
                        .HasForeignKey("AvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iPractice.Scheduling.Domain.SyncAggregates.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("iPractice.Scheduling.Domain.ValueObjects.TimeSlotValueObject", "TimeSlot", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("TEXT")
                                .HasColumnName("EndTime");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("TEXT")
                                .HasColumnName("StartTime");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.Navigation("Availability");

                    b.Navigation("Client");

                    b.Navigation("TimeSlot")
                        .IsRequired();
                });

            modelBuilder.Entity("iPractice.Scheduling.Domain.ScheduleAggregate.Availability", b =>
                {
                    b.HasOne("iPractice.Scheduling.Domain.ScheduleAggregate.Schedule", "Schedule")
                        .WithMany("Availabilities")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("iPractice.Scheduling.Domain.ValueObjects.AvailabilityTimeSlotValueObject", "AvailabilityTimeSlot", b1 =>
                        {
                            b1.Property<Guid>("AvailabilityId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("TEXT")
                                .HasColumnName("EndTime");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("TEXT")
                                .HasColumnName("StartTime");

                            b1.HasKey("AvailabilityId");

                            b1.ToTable("Availabilities");

                            b1.WithOwner()
                                .HasForeignKey("AvailabilityId");
                        });

                    b.Navigation("AvailabilityTimeSlot")
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("iPractice.Scheduling.Domain.ScheduleAggregate.Schedule", b =>
                {
                    b.HasOne("iPractice.Scheduling.Domain.SyncAggregates.Psychologist", "Psychologist")
                        .WithMany("Schedules")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("iPractice.Scheduling.Domain.ScheduleAggregate.Availability", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("iPractice.Scheduling.Domain.ScheduleAggregate.Schedule", b =>
                {
                    b.Navigation("Availabilities");
                });

            modelBuilder.Entity("iPractice.Scheduling.Domain.SyncAggregates.Client", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("iPractice.Scheduling.Domain.SyncAggregates.Psychologist", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
